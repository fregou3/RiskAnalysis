/**
 * Script pour corriger les probl√®mes d'encodage dans les notes de risque des PDF
 * Ce script corrige les caract√®res sp√©ciaux "√ò=√ü√†" qui apparaissent √† c√¥t√© des notes de risque
 */

const fs = require('fs');
const path = require('path');

// Fonction pour remplacer les caract√®res probl√©matiques dans les fichiers markdown ou texte
function fixRiskNotationInMarkdown() {
  // Dossier o√π les rapports sont g√©n√©r√©s ou stock√©s temporairement
  const directories = [
    path.join(__dirname, 'frontend', 'src', 'pages'),
    path.join(__dirname, 'backend', 'services'),
    path.join(__dirname, 'backend', 'routes'),
    path.join(__dirname, 'scripts')
  ];
  
  console.log('üîç Recherche et correction des probl√®mes d\'encodage dans les notes de risque...');
  
  // Expressions r√©guli√®res pour d√©tecter et corriger les probl√®mes
  const patterns = [
    { 
      regex: /Note de risque:\s*(\d+)\s*√ò=√ü√†/g, 
      replacement: 'Note de risque: $1' 
    },
    { 
      regex: /Note de risque\s*:\s*(\d+)\s*√ò=√ü√†/g, 
      replacement: 'Note de risque: $1' 
    },
    { 
      regex: /Note\s+de\s+risque\s*:\s*(\d+)\s*√ò=√ü√†/g, 
      replacement: 'Note de risque: $1' 
    },
    // Ajout de patterns sp√©cifiques pour les caract√®res probl√©matiques
    { 
      regex: /(\d+)\s*√ò=√ü√†/g, 
      replacement: '$1' 
    }
  ];
  
  // Parcourir tous les r√©pertoires
  directories.forEach(directory => {
    searchAndFixInDirectory(directory, patterns);
  });
  
  console.log('\n‚úÖ Recherche et correction termin√©es');
}

// Fonction pour rechercher et corriger r√©cursivement dans un r√©pertoire
function searchAndFixInDirectory(directory, patterns) {
  if (!fs.existsSync(directory)) return;
  
  const items = fs.readdirSync(directory);
  
  items.forEach(item => {
    const itemPath = path.join(directory, item);
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      // Ignorer les dossiers node_modules et .git
      if (item !== 'node_modules' && item !== '.git') {
        searchAndFixInDirectory(itemPath, patterns);
      }
    } else if (stats.isFile()) {
      // V√©rifier les extensions de fichiers pertinentes
      const ext = path.extname(itemPath).toLowerCase();
      if (['.js', '.jsx', '.ts', '.tsx', '.json', '.html', '.md', '.txt'].includes(ext)) {
        fixFileContent(itemPath, patterns);
      }
    }
  });
}

// Fonction pour corriger le contenu d'un fichier
function fixFileContent(filePath, patterns) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let originalContent = content;
    let modified = false;
    
    // Appliquer chaque pattern de correction
    patterns.forEach(({ regex, replacement }) => {
      if (regex.test(content)) {
        content = content.replace(regex, replacement);
        modified = true;
        console.log(`üîß Probl√®me d√©tect√© et corrig√© dans: ${filePath}`);
      }
    });
    
    // Enregistrer le fichier si des modifications ont √©t√© apport√©es
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ Fichier corrig√©: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå Erreur lors du traitement de ${filePath}:`, error.message);
  }
}

// Fonction pour corriger les probl√®mes d'encodage dans le code de g√©n√©ration PDF
function fixPdfGenerationCode() {
  const pdfGenerationFiles = [
    path.join(__dirname, 'frontend', 'src', 'pages', 'AIAnalysis.js'),
    path.join(__dirname, 'optimize-pdf-export.js'),
    path.join(__dirname, 'add-pdf-export.js')
  ];
  
  console.log('\nüîç Correction du code de g√©n√©ration PDF...');
  
  pdfGenerationFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      try {
        let content = fs.readFileSync(filePath, 'utf8');
        let originalContent = content;
        
        // Remplacer les caract√®res probl√©matiques dans le code de g√©n√©ration PDF
        // Rechercher les endroits o√π le texte est trait√© pour les PDF
        const pdfTextProcessingPatterns = [
          {
            // Rechercher les endroits o√π le texte markdown est converti en HTML
            regex: /(marked\.parse\(.*?\))/g,
            replacement: '$1.replace(/√ò=√ü√†/g, "")'
          },
          {
            // Rechercher les endroits o√π le texte est ajout√© au PDF
            regex: /(pdf\.text\(.*?\))/g,
            replacement: '$1.replace(/√ò=√ü√†/g, "")'
          },
          {
            // Rechercher les endroits o√π les lignes sont ajout√©es au PDF
            regex: /(lines\[i\])/g,
            replacement: '(lines[i] ? lines[i].replace(/√ò=√ü√†/g, "") : "")'
          }
        ];
        
        let modified = false;
        pdfTextProcessingPatterns.forEach(({ regex, replacement }) => {
          if (regex.test(content)) {
            content = content.replace(regex, replacement);
            modified = true;
          }
        });
        
        if (modified) {
          fs.writeFileSync(filePath, content, 'utf8');
          console.log(`‚úÖ Code de g√©n√©ration PDF corrig√© dans: ${filePath}`);
        } else {
          console.log(`‚ÑπÔ∏è Aucune correction n√©cessaire pour: ${filePath}`);
        }
      } catch (error) {
        console.error(`‚ùå Erreur lors du traitement de ${filePath}:`, error.message);
      }
    }
  });
}

// Ex√©cuter les fonctions principales
fixRiskNotationInMarkdown();
fixPdfGenerationCode();

console.log('\n‚úÖ Toutes les corrections ont √©t√© appliqu√©es. Veuillez red√©marrer l\'application pour appliquer les changements.');
