const axios = require('axios');
const cheerio = require('cheerio');
const searchService = require('./searchService');
const pappersService = require('./pappersService');

/**
 * Créer un objet de résultat standard
 * @param {string} type - Le type de résultat
 * @param {string} message - Le message d'information
 * @param {object} data - Les données du résultat
 * @returns {object} - L'objet de résultat
 */
function createResult(type, message, data = {}) {
  return {
    type,
    message,
    timestamp: new Date().toISOString(),
    data
  };
}

// Sources de données professionnelles pour le scraping
const DATA_SOURCES = {
  // Bases de données d'entreprises complètes
  ORBIS: 'orbis',                        // Bureau van Dijk - Données complètes sur les entreprises
  REFINITIV: 'refinitiv',                // Thomson Reuters - Données financières et ESG
  BLOOMBERG: 'bloomberg',                // Pour les entreprises cotées
  SP_GLOBAL: 'sp_global',                // S&P Global Market Intelligence
  OPENCORPORATES: 'opencorporates',      // Base de données ouverte sur les entreprises
  CAPITAL_IQ: 'capital_iq',              // Pour les structures d'actionnariat
  PAPPERS: 'pappers',                    // Pappers.fr - Données légales et financières des entreprises françaises
  
  // Registres nationaux des entreprises
  INFOGREFFE: 'infogreffe',              // France
  COMPANIES_HOUSE: 'companies_house',    // Royaume-Uni
  HANDELSREGISTER: 'handelsregister',    // Allemagne
  SECRETARY_OF_STATE: 'secretary_of_state', // États-Unis
  
  // Sources spécifiques pour les données ESG
  MSCI_ESG: 'msci_esg',                  // MSCI ESG Ratings
  SUSTAINALYTICS: 'sustainalytics',      // Sustainalytics
  ISS_ESG: 'iss_esg',                    // ISS ESG
  
  // Sources pour les codes sectoriels
  EUROSTAT: 'eurostat',                  // Codes NACE
  CENSUS_GOV: 'census_gov',              // Codes NAICS
  SICCODE: 'siccode',                    // Codes SIC
  
  // Sources pour les informations légales
  LEXISNEXIS: 'lexisnexis',              // LexisNexis Risk Solutions
  DUN_BRADSTREET: 'dun_bradstreet',      // Dun & Bradstreet
  
  // Sources pour les identifiants
  GLEIF: 'gleif',                        // Global Legal Entity Identifier Foundation
  GIIN: 'giin',                          // Global Intermediary Identification Number
  
  // Sources pour les données ESG et durabilité
  CDP: 'cdp',                            // Carbon Disclosure Project
  ECOVADIS: 'ecovadis',                  // EcoVadis
  
  // Sources pour les données financières
  EDGAR: 'edgar',                        // SEC EDGAR (États-Unis)
  AMF: 'amf',                            // Autorité des Marchés Financiers (France)
  
  // Sources pour les données de conformité
  OFAC: 'ofac',                          // Office of Foreign Assets Control (sanctions US)
  WORLDCHECK: 'worldcheck',              // Refinitiv World-Check
  
  // Sources pour les données de réputation
  TRUSTPILOT: 'trustpilot',              // Avis clients Trustpilot
  GLASSDOOR: 'glassdoor',                // Avis employés Glassdoor
  
  // Sources pour les données de presse
  FACTIVA: 'factiva',                    // Dow Jones Factiva
  PRESSREADER: 'pressreader'             // PressReader
};

/**
 * Fonction principale pour le scraping d'informations sur une entreprise
 * @param {string} companyName - Le nom de l'entreprise
 * @returns {Promise<object>} - Les informations collectées sur l'entreprise
 */
async function scrapeCompanyInfo(companyName) {
  try {
    console.log(`Starting comprehensive scraping for ${companyName}`);
    
    // Définir les sources à utiliser pour chaque type d'information
    const legendSources = [DATA_SOURCES.ORBIS];
    const subsidiarySources = [DATA_SOURCES.ORBIS, DATA_SOURCES.CAPITAL_IQ];
    const riskSources = [DATA_SOURCES.REFINITIV, DATA_SOURCES.SUSTAINALYTICS, DATA_SOURCES.MSCI_ESG];
    const sectorCodeSources = [DATA_SOURCES.EUROSTAT, DATA_SOURCES.CENSUS_GOV, DATA_SOURCES.SICCODE];
    const descriptionSources = [DATA_SOURCES.ORBIS, DATA_SOURCES.BLOOMBERG];
    const financialSources = [DATA_SOURCES.REFINITIV, DATA_SOURCES.BLOOMBERG, DATA_SOURCES.SP_GLOBAL];
    const contactSources = [DATA_SOURCES.ORBIS, DATA_SOURCES.INFOGREFFE];
    const legalSources = [DATA_SOURCES.INFOGREFFE, DATA_SOURCES.LEXISNEXIS, DATA_SOURCES.DUN_BRADSTREET];
    const ownershipSources = [DATA_SOURCES.CAPITAL_IQ, DATA_SOURCES.ORBIS];
    const sectorSources = [DATA_SOURCES.ORBIS, DATA_SOURCES.SP_GLOBAL];
    const esgSources = [DATA_SOURCES.MSCI_ESG, DATA_SOURCES.SUSTAINALYTICS, DATA_SOURCES.CDP];
    const otherSources = [DATA_SOURCES.GLASSDOOR, DATA_SOURCES.TRUSTPILOT, DATA_SOURCES.FACTIVA];
    
    // Exécuter les fonctions de scraping en parallèle
    const [
      legendInfo,
      subsidiaries,
      riskAssessments,
      sectorCodes,
      commercialDescription,
      financialData,
      contactInfo,
      legalInfo,
      ownershipStructure,
      sectorActivity,
      esgScores,
      otherInfo
    ] = await Promise.all([
      scrapeLegendInfo(companyName, legendSources[0]),
      scrapeSubsidiaries(companyName, subsidiarySources),
      scrapeRiskAssessments(companyName, riskSources),
      scrapeSectorCodes(companyName, sectorCodeSources),
      scrapeCommercialDescription(companyName, descriptionSources),
      scrapeFinancialData(companyName, financialSources),
      scrapeContactInfo(companyName, contactSources),
      scrapeLegalInfo(companyName, legalSources),
      scrapeOwnershipStructure(companyName, ownershipSources),
      scrapeSectorActivity(companyName, sectorSources),
      scrapeESGScores(companyName, esgSources),
      scrapeOtherInfo(companyName, otherSources)
    ]);
    
    // Agréger les résultats
    const result = {
      companyName,
      legendInfo,
      subsidiaries,
      riskAssessments,
      sectorCodes,
      commercialDescription,
      financialData,
      contactInfo,
      legalInfo,
      ownershipStructure,
      sectorActivity,
      esgScores,
      otherInfo,
      timestamp: new Date().toISOString()
    };
    
    console.log(`Completed comprehensive scraping for ${companyName}`);
    return result;
  } catch (error) {
    console.error(`Error in comprehensive scraping for ${companyName}:`, error);
    throw error;
  }
}

// Ici, insérez toutes les autres fonctions du fichier scraper.js original...

/**
 * 13. Scraping des données via Pappers.fr
 * @param {string} companyName - Le nom de l'entreprise
 * @returns {Promise<object>} - Les données complètes de l'entreprise depuis Pappers
 */
async function scrapePappersData(companyName) {
  try {
    console.log(`Scraping data from Pappers.fr for ${companyName}`);
    
    // Recherche de l'entreprise par son nom
    const searchResults = await pappersService.searchCompany(companyName);
    
    if (!searchResults.resultats || searchResults.resultats.length === 0) {
      console.log(`No results found on Pappers.fr for ${companyName}`);
      return {
        status: 'not_found',
        message: `Aucune entreprise trouvée pour ${companyName} sur Pappers.fr`,
        source: DATA_SOURCES.PAPPERS,
        retrievalMethod: 'API Pappers.fr',
        lastUpdate: new Date().toISOString()
      };
    }
    
    // Prendre le premier résultat (le plus pertinent)
    const company = searchResults.resultats[0];
    const siren = company.siren;
    
    // Récupérer les informations détaillées
    const [details, financialData, management, beneficialOwners, documents] = await Promise.all([
      pappersService.getCompanyDetails(siren),
      pappersService.getFinancialData(siren),
      pappersService.getCompanyManagement(siren),
      pappersService.getBeneficialOwners(siren),
      pappersService.getCompanyDocuments(siren)
    ]);
    
    // Structurer les données
    const pappersData = {
      identite: {
        siren: details.siren,
        nom: details.nom_entreprise,
        nomCommercial: details.nom_commercial,
        formeJuridique: details.forme_juridique,
        dateCreation: details.date_creation,
        capital: details.capital ? `${(details.capital / 1000).toFixed(0)} 000 EUR` : 'Non disponible',
        trancheEffectif: details.tranche_effectif || 'Non disponible',
        codeNaf: details.code_naf,
        libelleNaf: details.libelle_code_naf,
        statut: details.statut
      },
      siege: details.siege ? {
        siret: details.siege.siret,
        adresse: details.siege.adresse,
        codePostal: details.siege.code_postal,
        ville: details.siege.ville
      } : 'Non disponible',
      dirigeants: management.dirigeants ? management.dirigeants.map(d => ({
        nom: d.nom,
        prenom: d.prenom,
        fonction: d.fonction,
        dateNomination: d.date_nomination
      })) : [],
      beneficiairesEffectifs: beneficialOwners.beneficiaires ? beneficialOwners.beneficiaires.map(b => ({
        nom: b.nom,
        prenom: b.prenom,
        nationalite: b.nationalite,
        pourcentageParts: b.pourcentage_parts,
        dateGreffe: b.date_greffe
      })) : [],
      finances: financialData.comptes_sociaux ? financialData.comptes_sociaux.map(c => ({
        dateCloture: c.date_cloture,
        dureeExercice: c.duree_exercice,
        chiffreAffaires: c.chiffre_affaires ? `${(c.chiffre_affaires / 1000000).toFixed(2)} millions EUR` : 'Non disponible',
        resultatNet: c.resultat_net ? `${(c.resultat_net / 1000000).toFixed(2)} millions EUR` : 'Non disponible',
        effectif: c.effectif
      })) : [],
      documents: documents.documents || []
    };
    
    return {
      pappersData,
      source: DATA_SOURCES.PAPPERS,
      retrievalMethod: 'API Pappers.fr',
      lastUpdate: new Date().toISOString(),
      dataQuality: 'Haute',
      dataCompleteness: '95%'
    };
  } catch (error) {
    console.error(`Error scraping data from Pappers.fr for ${companyName}:`, error);
    return {
      status: 'error',
      message: `Erreur lors de la récupération des données sur Pappers.fr: ${error.message}`,
      source: DATA_SOURCES.PAPPERS,
      retrievalMethod: 'API Pappers.fr',
      lastUpdate: new Date().toISOString()
    };
  }
}

// Exporter les fonctions
module.exports = {
  scrapeCompanyInfo,
  scrapePappersData,
  findOfficialWebsite: async (companyName) => {
    try {
      const results = await searchService.search(`${companyName} site officiel`);
      if (results && results.length > 0) {
        return results[0].link;
      }
      return null;
    } catch (error) {
      console.error(`Error finding official website for ${companyName}:`, error);
      return null;
    }
  },
  DATA_SOURCES
};
