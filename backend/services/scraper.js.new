const axios = require('axios');
const cheerio = require('cheerio');
const searchService = require('./searchService');

/**
 * Créer un objet de résultat standard
 * @param {string} type - Le type de résultat
 * @param {string} message - Le message d'information
 * @param {object} data - Les données du résultat
 * @returns {object} - L'objet de résultat
 */
function createResult(type, message, data = {}) {
  return {
    type,
    message,
    timestamp: new Date().toISOString(),
    data
  };
}

// Sources de données professionnelles pour le scraping
const DATA_SOURCES = {
  // Bases de données d'entreprises complètes
  ORBIS: 'orbis',                        // Bureau van Dijk - Données complètes sur les entreprises
  REFINITIV: 'refinitiv',                // Thomson Reuters - Données financières et ESG
  BLOOMBERG: 'bloomberg',                // Pour les entreprises cotées
  SP_GLOBAL: 'sp_global',                // S&P Global Market Intelligence
  OPENCORPORATES: 'opencorporates',      // Base de données ouverte sur les entreprises
  CAPITAL_IQ: 'capital_iq',              // Pour les structures d'actionnariat
  
  // Registres nationaux des entreprises
  INFOGREFFE: 'infogreffe',              // France
  COMPANIES_HOUSE: 'companies_house',    // Royaume-Uni
  HANDELSREGISTER: 'handelsregister',    // Allemagne
  SECRETARY_OF_STATE: 'secretary_of_state', // États-Unis
  
  // Sources spécifiques pour les données ESG
  MSCI_ESG: 'msci_esg',                  // MSCI ESG Ratings
  SUSTAINALYTICS: 'sustainalytics',      // Sustainalytics
  ISS_ESG: 'iss_esg',                    // ISS ESG
  
  // Sources pour les codes sectoriels
  EUROSTAT: 'eurostat',                  // Codes NACE
  CENSUS_GOV: 'census_gov',              // Codes NAICS
  SICCODE: 'siccode',                    // Codes SIC
  
  // Sources pour les informations légales
  LEXISNEXIS: 'lexisnexis',              // LexisNexis Risk Solutions
  DUN_BRADSTREET: 'dun_bradstreet',      // Dun & Bradstreet
  
  // Sources pour les identifiants
  GLEIF: 'gleif'                         // Global Legal Entity Identifier Foundation
};

/**
 * Fonction principale pour le scraping d'informations sur une entreprise
 * @param {string} companyName - Le nom de l'entreprise
 * @returns {Promise<object>} - Les informations collectées sur l'entreprise
 */
async function scrapeCompanyInfo(companyName) {
  try {
    console.log(`Starting scraping process for company: ${companyName}`);
    
    // Structure pour stocker les données collectées
    const companyData = {
      companyName,
      scrapingTimestamp: new Date().toISOString(),
      sources: [],
      data: {}
    };
    
    // Créer un tableau des sources professionnelles à consulter
    const professionalSources = [
      { name: 'Orbis (Bureau van Dijk)', id: DATA_SOURCES.ORBIS, url: 'https://www.bvdinfo.com/en-gb/our-products/data/international/orbis' },
      { name: 'Infogreffe', id: DATA_SOURCES.INFOGREFFE, url: 'https://www.infogreffe.fr' },
      { name: 'Refinitiv', id: DATA_SOURCES.REFINITIV, url: 'https://www.refinitiv.com' },
      { name: 'MSCI ESG Ratings', id: DATA_SOURCES.MSCI_ESG, url: 'https://www.msci.com/our-solutions/esg-investing/esg-ratings' },
      { name: 'Eurostat (NACE)', id: DATA_SOURCES.EUROSTAT, url: 'https://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM_DTL&StrNom=NACE_REV2' },
      { name: 'Global LEI Foundation', id: DATA_SOURCES.GLEIF, url: 'https://www.gleif.org' },
      { name: 'Opencorporates', id: DATA_SOURCES.OPENCORPORATES, url: 'https://opencorporates.com' }
    ];
    
    // Ajouter les sources professionnelles à la liste des sources
    companyData.sources = professionalSources.map(source => ({
      title: source.name,
      url: source.url,
      snippet: `Source professionnelle de données sur les entreprises: ${source.name}`
    }));
    
    console.log(`Using ${professionalSources.length} professional data sources`);
    
    // Définir les fonctions de scraping pour chaque catégorie de données
    // Chaque fonction utilise les sources professionnelles appropriées
    const scrapingFunctions = [
      { 
        key: 'legend', 
        fn: async () => {
          console.log(`Scraping legend info for ${companyName} from ${DATA_SOURCES.ORBIS}`);
          return await scrapeLegendInfo(companyName, DATA_SOURCES.ORBIS);
        }
      },
      { 
        key: 'subsidiaries', 
        fn: async () => {
          console.log(`Scraping subsidiaries for ${companyName} from ${DATA_SOURCES.ORBIS} and ${DATA_SOURCES.CAPITAL_IQ}`);
          return await scrapeSubsidiaries(companyName, [DATA_SOURCES.ORBIS, DATA_SOURCES.CAPITAL_IQ]);
        }
      },
      { 
        key: 'riskAssessments', 
        fn: async () => {
          console.log(`Scraping risk assessments for ${companyName} from ${DATA_SOURCES.MSCI_ESG} and ${DATA_SOURCES.SUSTAINALYTICS}`);
          return await scrapeRiskAssessments(companyName, [DATA_SOURCES.MSCI_ESG, DATA_SOURCES.SUSTAINALYTICS]);
        }
      },
      { 
        key: 'sectorCodes', 
        fn: async () => {
          console.log(`Scraping sector codes for ${companyName} from ${DATA_SOURCES.EUROSTAT}, ${DATA_SOURCES.CENSUS_GOV}, and ${DATA_SOURCES.SICCODE}`);
          return await scrapeSectorCodes(companyName, [DATA_SOURCES.EUROSTAT, DATA_SOURCES.CENSUS_GOV, DATA_SOURCES.SICCODE]);
        }
      },
      { 
        key: 'commercialDescription', 
        fn: async () => {
          console.log(`Scraping commercial description for ${companyName} from ${DATA_SOURCES.ORBIS} and ${DATA_SOURCES.REFINITIV}`);
          return await scrapeCommercialDescription(companyName, [DATA_SOURCES.ORBIS, DATA_SOURCES.REFINITIV]);
        }
      },
      { 
        key: 'financialData', 
        fn: async () => {
          console.log(`Scraping financial data for ${companyName} from ${DATA_SOURCES.REFINITIV}, ${DATA_SOURCES.BLOOMBERG}, and ${DATA_SOURCES.SP_GLOBAL}`);
          return await scrapeFinancialData(companyName, [DATA_SOURCES.REFINITIV, DATA_SOURCES.BLOOMBERG, DATA_SOURCES.SP_GLOBAL]);
        }
      },
      { 
        key: 'contactInfo', 
        fn: async () => {
          console.log(`Scraping contact info for ${companyName} from ${DATA_SOURCES.ORBIS} and ${DATA_SOURCES.INFOGREFFE}`);
          return await scrapeContactInfo(companyName, [DATA_SOURCES.ORBIS, DATA_SOURCES.INFOGREFFE]);
        }
      },
      { 
        key: 'legalInfo', 
        fn: async () => {
          console.log(`Scraping legal info for ${companyName} from ${DATA_SOURCES.INFOGREFFE}, ${DATA_SOURCES.LEXISNEXIS}, and ${DATA_SOURCES.DUN_BRADSTREET}`);
          return await scrapeLegalInfo(companyName, [DATA_SOURCES.INFOGREFFE, DATA_SOURCES.LEXISNEXIS, DATA_SOURCES.DUN_BRADSTREET]);
        }
      },
      { 
        key: 'ownershipStructure', 
        fn: async () => {
          console.log(`Scraping ownership structure for ${companyName} from ${DATA_SOURCES.ORBIS} and ${DATA_SOURCES.CAPITAL_IQ}`);
          return await scrapeOwnershipStructure(companyName, [DATA_SOURCES.ORBIS, DATA_SOURCES.CAPITAL_IQ]);
        }
      },
      { 
        key: 'sectorActivity', 
        fn: async () => {
          console.log(`Scraping sector activity for ${companyName} from ${DATA_SOURCES.ORBIS} and ${DATA_SOURCES.SP_GLOBAL}`);
          return await scrapeSectorActivity(companyName, [DATA_SOURCES.ORBIS, DATA_SOURCES.SP_GLOBAL]);
        }
      },
      { 
        key: 'esgScores', 
        fn: async () => {
          console.log(`Scraping ESG scores for ${companyName} from ${DATA_SOURCES.MSCI_ESG}, ${DATA_SOURCES.SUSTAINALYTICS}, and ${DATA_SOURCES.ISS_ESG}`);
          return await scrapeESGScores(companyName, [DATA_SOURCES.MSCI_ESG, DATA_SOURCES.SUSTAINALYTICS, DATA_SOURCES.ISS_ESG]);
        }
      },
      { 
        key: 'otherInfo', 
        fn: async () => {
          console.log(`Scraping other info for ${companyName} from ${DATA_SOURCES.GLEIF} and ${DATA_SOURCES.DUN_BRADSTREET}`);
          return await scrapeOtherInfo(companyName, [DATA_SOURCES.GLEIF, DATA_SOURCES.DUN_BRADSTREET]);
        }
      }
    ];
    
    console.log(`Executing ${scrapingFunctions.length} scraping functions using professional sources`);
    
    // Exécuter toutes les fonctions de scraping en parallèle
    const results = await Promise.allSettled(
      scrapingFunctions.map(({ fn }) => fn())
    );
    
    // Traiter les résultats
    results.forEach((result, index) => {
      const { key } = scrapingFunctions[index];
      
      if (result.status === 'fulfilled') {
        console.log(`Scraping function for '${key}' completed successfully`);
        companyData.data[key] = result.value;
      } else {
        console.error(`Scraping function for '${key}' failed:`, result.reason);
        // En cas d'échec, utiliser un objet vide
        companyData.data[key] = {};
      }
    });
    
    // Filtrer les données non disponibles et s'assurer que toutes les catégories sont présentes
    Object.keys(companyData.data).forEach(key => {
      if (!companyData.data[key] || Object.keys(companyData.data[key]).length === 0) {
        companyData.data[key] = { status: 'Information non disponible' };
      }
    });
    
    console.log(`Scraping process completed for ${companyName}`);
    return companyData;
  } catch (error) {
    console.error(`Error in scraping process for ${companyName}:`, error);
    
    // En cas d'erreur globale, retourner un objet avec un message d'erreur
    throw new Error(`Impossible de collecter des données pour ${companyName}: ${error.message}`);
  }
}
